// main.rs

use std::error::Error;
use std::fs;

struct Flashcard {
    question: String,
    answer: String,
}

fn read_flashcards(filename: &str) -> Result<Vec<Flashcard>, Box<dyn Error>> {
    let content = fs::read_to_string(filename)?;
    let mut flashcards = Vec::new();

    for line in content.lines() {
        let parts: Vec<&str> = line.split(',').collect();
        if parts.len() == 2 {
            flashcards.push(Flashcard {
                question: parts[0].to_string(),
                answer: parts[1].to_string(),
            });
        }
    }

    Ok(flashcards)
}

fn main() -> Result<(), Box<dyn Error>> {
    let filename = "flashcards.csv";
    let flashcards = read_flashcards(filename)?;

    for card in flashcards {
        println!("Question: {}", card.question);
        println!("Type your answer: ");
        // Read user input and compare with card.answer
        // Provide feedback
    }

    Ok(())
}
